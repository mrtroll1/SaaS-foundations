PIPELINE:

0. Initialize a venv virtual environment
1. Initialize a Django project vith minimal functionality
    a. Start a new Django app to count page visits
    b. Use template inheritance
2. Initialize git and link to remote
    a. Use pre-made .gitignore for python
3. Deploy to Railway with Docker 
    a. Manage environment using decouple and Railway variables
    b. Voila! website is online
4. Integrate a PostgreSQL database with Neon
    a. Voila! website pulls data from db
5. Add staticfiles processing logic
    a. Define directory structure in settings.py
    b. Start a new Django app for defining custom manage.py commands
        - vendor_pull run by docker downloads vendor staticfiles
    c. Use whitenoise to serve django static files
6. Use gmail for django to send emails
    a. Create a gmail account and set app passwords
    b. Add necessary environment
7. 'Manually' handle user authentication
    a. Start a new Django app for managing authentication
    b. Define basic login and registration views
8. Implement Django AllAuth to handle user authentication locally
    a. Configure (add email verification)
    b. Add a nicer UI [1]
    c. Add GitHub social account auth [2]
9. Step 8 but on a railway dev server
    a. Create a separate OAuth app
    b. Add a django site and manage environment
    c. Allow github csrf tokens and ensure httpS
10. Managing user profiles and authorization
    a. Start a new Django app - profiles
    b. Define basic views with basic permissions
    c. Use user groups
    d. Start a new django app to manage custom permissions - subscriptions
    e. Subscriptions model allows to sync Groups and Permissions
11. Getting started with Stripe
    a. Create a Customer model, override django save method
    b. Implement a billing.py helper
    c. Use django-allauth signals to manage data consistency
    d. Match Subscription(Price) models to Stripe Product, Price 
12. Implement Stripe Checkout
    a. Build a plan selection page
    b. Define redirection views using Django sessions
    c. Update the databse upon successfull purchase
    d. Manage subscriptions canceling
    e. Define custom management commands and QuerySet methods
13. GitHub Actions
    a. Basic Django testing


ERRORS:
[1] - Conflicting styles of flowbite and allauth_ui, pain...
[2] - Doesn't work (god I've tried to solve this one). 
      -  Fixed by using OAuth github app instead of GitHub app